//////////////////////////////////////////////////////////////////////////////
//    Copyright 2004-2007, SenseGraphics AB
//
//    This file is part of H3D API.
//
//    H3D API is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    H3D API is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with H3D API; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//    A commercial license is also available. Please contact us at 
//    www.sensegraphics.com for more information.
//
//
/// \file HAPIHapticsDevice.cpp
/// \brief Cpp file for HAPIHapticsDevice.
///
//
//////////////////////////////////////////////////////////////////////////////

#include <HAPI/HAPIHapticsDevice.h>

using namespace HAPI;

HAPIHapticsDevice::local_auto_ptr< list< HAPIHapticsDevice::HapticsDeviceRegistration > 
 > HAPIHapticsDevice::registered_devices( NULL );
 
bool HAPIHapticsDevice::initialized = false; 

H3DUtil::PeriodicThread::CallbackCode HAPIHapticsDevice::transferObjectsCallback( 
  void *data ) {
  HAPIHapticsDevice *hd = 
    static_cast< HAPIHapticsDevice * >( data );
  hd->current_shapes = hd->tmp_shapes;
  return H3DUtil::PeriodicThread::CALLBACK_DONE;
}

// Callback function for rendering force effects on the 
// HLHapticsDevice.  
H3DUtil::PeriodicThread::CallbackCode HAPIHapticsDevice::hapticRenderingCallback( void *data ) {


  HAPIHapticsDevice *hd = 
    static_cast< HAPIHapticsDevice * >( data );
  if( hd->nr_haptics_loops > 100 ) {
    TimeStamp now = TimeStamp();
    unsigned int nr_loops = hd->nr_haptics_loops;
    hd->nr_haptics_loops = 0;
    TimeStamp dt = now - hd->last_hr_update;
    hd->haptics_rate = (unsigned int)( nr_loops / dt );
    hd->last_hr_update = now;
  }
  hd->nr_haptics_loops++;
  
  TimeStamp start_time = TimeStamp();
  TimeStamp dt = start_time - hd->last_loop_time;
  hd->last_loop_time = start_time;

  hd->updateDeviceValues( dt );
  
  HAPIForceEffect::EffectOutput output;
  
  // calculate the forces generated by the force effects from the
  // last loop that are to be interpolated. 
  for( HapticEffectVector::const_iterator i = hd->last_force_effects.begin();
       i != hd->last_force_effects.end();
       i++ ) {
    if( (*i)->isInterpolated() )
      output = output + (*i)->calculateForces( hd, dt );
  }
  
  // TODO: this seems unimplemented
  double weighting = 1; //dt / hd->last_loop_time;
  if( weighting > 1 ) weighting = 1;
  // the previous force effects are to be decreased as time goes by.
  output = output * ( 1 - weighting );
  
  hd->force_effect_lock.lock();
  // calculate the forces generated by the active force effects
  for( HapticEffectVector::const_iterator i = hd->current_force_effects.begin();
       i != hd->current_force_effects.end();
       i++ ) {
    if( (*i)->isInterpolated() )
      output = output + (*i)->calculateForces( hd, dt ) * weighting;
    else
      output = output + (*i)->calculateForces( hd, dt );
  }
  hd->force_effect_lock.unlock();

  hd->renderer_change_lock.lock();

  for( unsigned int s = 0; s < hd->haptics_renderers.size(); s++ ) {
    if( hd->haptics_renderers[s] && s < hd->current_shapes.size() ) {
      output = output + 
        hd->haptics_renderers[s]->renderHapticsOneStep( hd, hd->current_shapes[s] );
    }
  }

  hd->renderer_change_lock.unlock();

  // add the resulting force and torque to the rendered force.
  hd->sendForce( output.force );
  hd->sendTorque( output.torque );

  hd->sendOutput();

  hd->time_in_last_loop = TimeStamp() - start_time;

  if( hd->device_state == UNINITIALIZED )
    return H3DUtil::PeriodicThread::CALLBACK_DONE;
  else
    return H3DUtil::PeriodicThread::CALLBACK_CONTINUE;
}

void HAPIHapticsDevice::transferObjects() {
  if( thread ) {
    for( unsigned int s = 0; s < haptics_renderers.size(); s++ ) {
      if( haptics_renderers[s] && s < tmp_shapes.size() ) {
         haptics_renderers[s]->preProcessShapes( this, tmp_shapes[s] );
      }
    }
    thread->synchronousCallback( transferObjectsCallback,
                                 this );

  }
}


HAPIHapticsDevice::ErrorCode HAPIHapticsDevice::initDevice() {
  if( device_state == UNINITIALIZED ) {
    last_device_values = current_device_values = DeviceValues();
    last_raw_device_values = current_raw_device_values = DeviceValues();
    if( !initHapticsDevice() ) {
      return FAIL;
    }
    device_state = INITIALIZED;
    for( unsigned int i = 0; i < haptics_renderers.size(); i++ ) {
      if( haptics_renderers[i] ) {
        haptics_renderers[i]->initRenderer( this );
      }
    }
    
    device_state = INITIALIZED;
    if( !thread ) {
          // create a new thread to run the haptics in
#ifdef WIN32
      thread = new H3DUtil::HapticThread(  THREAD_PRIORITY_ABOVE_NORMAL, 1000 );
#else
      thread = new H3DUtil::HapticThread( 20, 1000 );
#endif
      delete_thread = true;
    }
    if( setup_haptic_rendering_callback ) {
      thread->asynchronousCallback( hapticRenderingCallback,
                                    this );
    }
    
  }
  return SUCCESS;
}

void HAPIHapticsDevice::updateDeviceValues( HAPITime dt ) {
  if( device_state == ENABLED ) {
    DeviceValues dv;
    updateDeviceValues( dv, dt );
    
    device_values_lock.lock();
    last_device_values = current_device_values;
    last_raw_device_values = current_raw_device_values;
    current_raw_device_values = dv;

    current_device_values.position = position_calibration * dv.position;
    
    current_device_values.velocity = 
      position_calibration.getScaleRotationPart() * dv.velocity;
    current_device_values.orientation = 
      orientation_calibration * dv.orientation;
    current_device_values.force = 
      position_calibration.getScaleRotationPart() * dv.force;
    current_device_values.torque = 
      position_calibration.getScaleRotationPart() * dv.torque;
    device_values_lock.unlock();
  } else {
    if( device_state == INITIALIZED ) {
      device_values_lock.lock();
      last_device_values = current_device_values;
      last_raw_device_values = current_raw_device_values;
      device_values_lock.unlock();
    }
  }
}
