//////////////////////////////////////////////////////////////////////////////
//    Copyright 2004, SenseGraphics AB
//
//    This file is part of H3D API.
//
//    H3D API is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    H3D API is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with H3D API; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//    A commercial license is also available. Please contact us at 
//    www.sensegraphics.com for more information.
//
//
/// \file OpenHapticsRenderer.h
/// \brief Header file for OpenHapticsRenderer.
///
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __OPENHAPTICSRENDERER_H__
#define __OPENHAPTICSRENDERER_H__

#include <HAPIHapticsRenderer.h>
#include <Threads.h>
#include <HL/hl.h>
#include <map>
#include <H3DApi.h>

namespace H3D {

  /// \class OpenHapticsRenderer
  /// \brief Haptics renderer using the HL API part of OpenHaptics for the 
  /// haptics rendering.
  class H3DAPI_API OpenHapticsRenderer: public HAPI::HAPIHapticsRenderer {
  public:

    /// Initialize the renderer to be used with the given haptics device.
    virtual void initRenderer( HAPI::HAPIHapticsDevice *hd );

    /// Release all resources that has been used in the renderer for
    /// the given haptics device.
    virtual void releaseRenderer( HAPI::HAPIHapticsDevice *hd );

    /// Use HL API in OpenHaptics to render the shapes.
    virtual void preProcessShapes( HAPI::HAPIHapticsDevice *hd,
                                   const HapticShapeVector &shapes );

    /// Destructor.
    virtual ~OpenHapticsRenderer() {}
    
    /// The main function in any haptics renderer. Given a haptics device and 
    /// a group of shapes generate the force and torque to send to the device.
    /// Reads the forces generated by HL API and returns them.
    virtual HAPI::HapticForceEffect::EffectOutput 
    renderHapticsOneStep( HAPI::HAPIHapticsDevice *hd,
                          const HapticShapeVector &shapes );

    /// Get the current proxy position.
    inline HAPI::Vec3 getProxyPosition() {
        HLdouble pos[3];
        hlGetDoublev( HL_PROXY_POSITION, pos );
        return HAPI::Vec3( pos[0], pos[1], pos[2] );
    }

    /// Register this renderer to the haptics renderer database.
    static HapticsRendererRegistration renderer_registration;

  protected:
    /// Generate a new HL context for the given haptics device.
    HHLRC initHLLayer( HAPI::HAPIHapticsDevice *pd );

    typedef std::map< HAPI::HAPIHapticsDevice *, HHLRC > ContextMap;

    /// A map from haptics device to HL API context
    ContextMap context_map;
  };
}

#endif
